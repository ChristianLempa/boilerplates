# I referenced this link regarding the ollama rest API. Idk, it just worked. https://www.postman.com/postman-student-programs/ollama-api/documentation/suc47x8/ollama-rest-api
# Also studied prior: https://sleeplessbeastie.eu/2024/03/18/how-to-utilize-ntfy-notifications-from-gitlab-pipelines/
# Base component structure: https://www.youtube.com/watch?v=pwRWXCdbDVo
# Suggested component description:
# CI/CD component to provide text generation using the Ollama REST API as a stage within GitLab runs.
---
spec:
  inputs:
    as:
      default: ollama-generate
      description: 'The name of the Gitlab CI/CD job that will be generated by this component.'
    stage:
      default: ollama
      description: 'The name of the stage this components job will belong to..'
    ollama_url:
      default: 'http://glicynia:11434'
      description: 'The base URL of the ollama instance that will be used to generate and print text to stdout. (http://localhost:11434)'
    ollama_model:
      default: 'gemma3'
      description: 'The name and release tag of the model that should be used to generate text and is present on the ollama host. (gemma3:latest)'
    ollama_prompt:
      default: 'You are a LLM known to the user as gemma3 and the user is interacting with you through a GitLab CI/CD component authored by SoFMeRight. Generate 3-5 ideas for how the current user might write prompts using this component to process information generated by the CI/CD pipeline and enhance the readability. You are also welcome to mention any other benefits to integrating LLMs to a CI/CD pipeline that you might perceive.'
      description: 'The url of an image or other file to be attached to the ntfy web-push notification.'
    ollama_stream_output:
      default: "false"
      description: 'Determines whether generated text will be printed to stdout when it is fully ready (false), or as a stream (true). (Warning- true is not implemented.)'

---

'$[[ inputs.as ]]':
  stage: '$[[ inputs.stage ]]'
  image:
    name: alpine:latest
    entrypoint: [""]
  variables:
    OLLAMA_URL: "$[[ inputs.ollama_url ]]"
    OLLAMA_MODEL: "$[[ inputs.ollama_model ]]"
    OLLAMA_PROMPT: "$[[ inputs.ollama_prompt ]]"
    OLLAMA_STREAM: "$[[ inputs.ollama_stream_output ]]"
  before_script: |
    echo "---------------------------------------------------------------------------"
    echo "Ollama CI/CD Component ðŸ¤– - preparing environment - Building an alpine image to query the Ollama API via curl"
    echo "---------------------------------------------------------------------------"
    echo "Installing dependencies [curl jq]..."
    apk add --no-cache curl jq >/dev/null
  script: |
    echo "---------------------------------------------------------------------------"
    echo "Ollama CI/CD Component ðŸ¤– - generating text - Now querying the Ollama API with the specified prompt"
    RESPONSE=$(curl -s "${OLLAMA_URL}/api/generate" \
      -d "{\"model\": \"${OLLAMA_MODEL}\", \"prompt\": \"${OLLAMA_PROMPT}\", \"stream\": $OLLAMA_STREAM}" )
    FORMATTED=$(echo "$RESPONSE" | jq -r '.response' | sed 's/\\n/\n/g' | sed 's/\\u0026/\&/g')
    echo "---------------------------------------------------------------------------"
    echo "Prompt:"
    echo "${OLLAMA_PROMPT}"
    echo "---------------------------------------------------------------------------"
    echo "Generated Response:"
    echo -e "$FORMATTED"
    echo "---------------------------------------------------------------------------"
    echo "Ollama CI/CD Component ðŸ¤– - generating text - Ollama finished generating text, exiting... âœ…"
    echo "---------------------------------------------------------------------------"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      #changes:
        #- '$[[ inputs.root_dir ]]/$[[ inputs.project_file ]]'
